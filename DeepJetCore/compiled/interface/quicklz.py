# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_quicklz')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_quicklz')
    _quicklz = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_quicklz', [dirname(__file__)])
        except ImportError:
            import _quicklz
            return _quicklz
        try:
            _mod = imp.load_module('_quicklz', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _quicklz = swig_import_helper()
    del swig_import_helper
else:
    import _quicklz
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

QLZ_COMPRESSION_LEVEL = _quicklz.QLZ_COMPRESSION_LEVEL
QLZ_STREAMING_BUFFER = _quicklz.QLZ_STREAMING_BUFFER
QLZ_VERSION_MAJOR = _quicklz.QLZ_VERSION_MAJOR
QLZ_VERSION_MINOR = _quicklz.QLZ_VERSION_MINOR
QLZ_VERSION_REVISION = _quicklz.QLZ_VERSION_REVISION
QLZ_POINTERS = _quicklz.QLZ_POINTERS
QLZ_HASH_VALUES = _quicklz.QLZ_HASH_VALUES
class qlz_hash_compress(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, qlz_hash_compress, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, qlz_hash_compress, name)
    __repr__ = _swig_repr
    __swig_setmethods__["offset"] = _quicklz.qlz_hash_compress_offset_set
    __swig_getmethods__["offset"] = _quicklz.qlz_hash_compress_offset_get
    if _newclass:
        offset = _swig_property(_quicklz.qlz_hash_compress_offset_get, _quicklz.qlz_hash_compress_offset_set)

    def __init__(self):
        this = _quicklz.new_qlz_hash_compress()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _quicklz.delete_qlz_hash_compress
    __del__ = lambda self: None
qlz_hash_compress_swigregister = _quicklz.qlz_hash_compress_swigregister
qlz_hash_compress_swigregister(qlz_hash_compress)

class qlz_hash_decompress(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, qlz_hash_decompress, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, qlz_hash_decompress, name)
    __repr__ = _swig_repr
    __swig_setmethods__["offset"] = _quicklz.qlz_hash_decompress_offset_set
    __swig_getmethods__["offset"] = _quicklz.qlz_hash_decompress_offset_get
    if _newclass:
        offset = _swig_property(_quicklz.qlz_hash_decompress_offset_get, _quicklz.qlz_hash_decompress_offset_set)

    def __init__(self):
        this = _quicklz.new_qlz_hash_decompress()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _quicklz.delete_qlz_hash_decompress
    __del__ = lambda self: None
qlz_hash_decompress_swigregister = _quicklz.qlz_hash_decompress_swigregister
qlz_hash_decompress_swigregister(qlz_hash_decompress)

class qlz_state_compress(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, qlz_state_compress, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, qlz_state_compress, name)
    __repr__ = _swig_repr
    __swig_setmethods__["stream_buffer"] = _quicklz.qlz_state_compress_stream_buffer_set
    __swig_getmethods__["stream_buffer"] = _quicklz.qlz_state_compress_stream_buffer_get
    if _newclass:
        stream_buffer = _swig_property(_quicklz.qlz_state_compress_stream_buffer_get, _quicklz.qlz_state_compress_stream_buffer_set)
    __swig_setmethods__["stream_counter"] = _quicklz.qlz_state_compress_stream_counter_set
    __swig_getmethods__["stream_counter"] = _quicklz.qlz_state_compress_stream_counter_get
    if _newclass:
        stream_counter = _swig_property(_quicklz.qlz_state_compress_stream_counter_get, _quicklz.qlz_state_compress_stream_counter_set)
    __swig_setmethods__["hash"] = _quicklz.qlz_state_compress_hash_set
    __swig_getmethods__["hash"] = _quicklz.qlz_state_compress_hash_get
    if _newclass:
        hash = _swig_property(_quicklz.qlz_state_compress_hash_get, _quicklz.qlz_state_compress_hash_set)
    __swig_setmethods__["hash_counter"] = _quicklz.qlz_state_compress_hash_counter_set
    __swig_getmethods__["hash_counter"] = _quicklz.qlz_state_compress_hash_counter_get
    if _newclass:
        hash_counter = _swig_property(_quicklz.qlz_state_compress_hash_counter_get, _quicklz.qlz_state_compress_hash_counter_set)

    def __init__(self):
        this = _quicklz.new_qlz_state_compress()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _quicklz.delete_qlz_state_compress
    __del__ = lambda self: None
qlz_state_compress_swigregister = _quicklz.qlz_state_compress_swigregister
qlz_state_compress_swigregister(qlz_state_compress)

class qlz_state_decompress(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, qlz_state_decompress, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, qlz_state_decompress, name)
    __repr__ = _swig_repr
    __swig_setmethods__["stream_buffer"] = _quicklz.qlz_state_decompress_stream_buffer_set
    __swig_getmethods__["stream_buffer"] = _quicklz.qlz_state_decompress_stream_buffer_get
    if _newclass:
        stream_buffer = _swig_property(_quicklz.qlz_state_decompress_stream_buffer_get, _quicklz.qlz_state_decompress_stream_buffer_set)
    __swig_setmethods__["stream_counter"] = _quicklz.qlz_state_decompress_stream_counter_set
    __swig_getmethods__["stream_counter"] = _quicklz.qlz_state_decompress_stream_counter_get
    if _newclass:
        stream_counter = _swig_property(_quicklz.qlz_state_decompress_stream_counter_get, _quicklz.qlz_state_decompress_stream_counter_set)

    def __init__(self):
        this = _quicklz.new_qlz_state_decompress()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _quicklz.delete_qlz_state_decompress
    __del__ = lambda self: None
qlz_state_decompress_swigregister = _quicklz.qlz_state_decompress_swigregister
qlz_state_decompress_swigregister(qlz_state_decompress)


def qlz_size_decompressed(source):
    return _quicklz.qlz_size_decompressed(source)
qlz_size_decompressed = _quicklz.qlz_size_decompressed

def qlz_size_compressed(source):
    return _quicklz.qlz_size_compressed(source)
qlz_size_compressed = _quicklz.qlz_size_compressed

def qlz_compress(source, destination, size, state):
    return _quicklz.qlz_compress(source, destination, size, state)
qlz_compress = _quicklz.qlz_compress

def qlz_decompress(source, destination, state):
    return _quicklz.qlz_decompress(source, destination, state)
qlz_decompress = _quicklz.qlz_decompress

def qlz_get_setting(setting):
    return _quicklz.qlz_get_setting(setting)
qlz_get_setting = _quicklz.qlz_get_setting
# This file is compatible with both classic and new-style classes.


